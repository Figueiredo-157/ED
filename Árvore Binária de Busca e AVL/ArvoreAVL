public class ArvoreAVL {
    No raiz;

    public void inserir(int valor) {
        raiz = inserirRec(raiz, valor);
    }

    private No inserirRec(No no, int valor) {
        if (no == null) return new No(valor);

        if (valor < no.valor)
            no.esquerda = inserirRec(no.esquerda, valor);
        else if (valor > no.valor)
            no.direita = inserirRec(no.direita, valor);
        else
            return no;

        no.altura = 1 + Math.max(altura(no.esquerda), altura(no.direita));

        int balance = fatorBalanceamento(no);

        if (balance > 1 && valor < no.esquerda.valor)
            return rotacaoDireita(no);
        if (balance < -1 && valor > no.direita.valor)
            return rotacaoEsquerda(no);
        if (balance > 1 && valor > no.esquerda.valor) {
            no.esquerda = rotacaoEsquerda(no.esquerda);
            return rotacaoDireita(no);
        }
        if (balance < -1 && valor < no.direita.valor) {
            no.direita = rotacaoDireita(no.direita);
            return rotacaoEsquerda(no);
        }

        return no;
    }

    private int altura(No n) {
        return (n == null) ? 0 : n.altura;
    }

    private int fatorBalanceamento(No n) {
        return (n == null) ? 0 : altura(n.esquerda) - altura(n.direita);
    }

    private No rotacaoDireita(No y) {
        No x = y.esquerda;
        No T2 = x.direita;

        x.direita = y;
        y.esquerda = T2;

        y.altura = Math.max(altura(y.esquerda), altura(y.direita)) + 1;
        x.altura = Math.max(altura(x.esquerda), altura(x.direita)) + 1;

        return x;
    }

    private No rotacaoEsquerda(No x) {
        No y = x.direita;
        No T2 = y.esquerda;

        y.esquerda = x;
        x.direita = T2;

        x.altura = Math.max(altura(x.esquerda), altura(x.direita)) + 1;
        y.altura = Math.max(altura(y.esquerda), altura(y.direita)) + 1;

        return y;
    }

    public void mostrar() {
        mostrarRec(raiz, "", true);
    }

    private void mostrarRec(No no, String prefixo, boolean isTail) {
        if (no == null) return;
        System.out.println(prefixo + (isTail ? "└── " : "├── ") + no.valor);
        if (no.esquerda != null || no.direita != null) {
            mostrarRec(no.esquerda, prefixo + (isTail ? "    " : "│   "), false);
            mostrarRec(no.direita, prefixo + (isTail ? "    " : "│   "), true);
        }
    }
}
